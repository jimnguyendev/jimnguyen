"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var readFile_1 = require("../utils/readFile");
var toArray_1 = require("../utils/toArray");
/**
 * Extract clipboard items to be a ClipboardData object for IE
 * @param dataTransfer The clipboard items retrieve from a DataTransfer object
 * @param callback Callback function when data is ready
 * @returns An object with the following properties:
 *  types: Available types from the clipboard event
 *  text: Plain text from the clipboard event
 *  image: Image file from the clipboard event
 *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.
 *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is
 *   not supported by browser.
 */
function extractClipboardItemsForIE(dataTransfer, callback, options) {
    var _a;
    var clipboardData = {
        types: dataTransfer.types ? (0, toArray_1.default)(dataTransfer.types) : [],
        text: dataTransfer.getData('text'),
        image: null,
        rawHtml: null,
        customValues: {},
    };
    for (var i = 0; i < (dataTransfer.files ? dataTransfer.files.length : 0); i++) {
        var file = dataTransfer.files.item(i);
        if (((_a = file.type) === null || _a === void 0 ? void 0 : _a.indexOf("image/" /* Image */)) == 0) {
            clipboardData.image = file;
            break;
        }
    }
    var nextStep = function () {
        if (clipboardData.image) {
            (0, readFile_1.default)(clipboardData.image, function (dataUrl) {
                clipboardData.imageDataUri = dataUrl;
                callback(clipboardData);
            });
        }
        else {
            callback(clipboardData);
        }
    };
    if ((options === null || options === void 0 ? void 0 : options.getTempDiv) && (options === null || options === void 0 ? void 0 : options.removeTempDiv)) {
        var div_1 = options.getTempDiv();
        div_1.contentEditable = 'true';
        div_1.innerHTML = '';
        div_1.focus();
        div_1.ownerDocument.defaultView.setTimeout(function () {
            clipboardData.rawHtml = div_1.innerHTML;
            options.removeTempDiv(div_1);
            nextStep();
        }, 0);
    }
    else {
        clipboardData.rawHtml = undefined;
        nextStep();
    }
}
exports.default = extractClipboardItemsForIE;
//# sourceMappingURL=extractClipboardItemsForIE.js.map