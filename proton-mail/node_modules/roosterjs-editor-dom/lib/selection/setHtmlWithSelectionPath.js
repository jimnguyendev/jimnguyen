"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var createRange_1 = require("./createRange");
var LastCommentRegex = /<!--([^-]+)-->$/;
/**
 * Restore inner Html of a root element from given html string. If the string contains selection path,
 * remove the selection path and return a range represented by the path
 * @param root The root element
 * @param html The html to restore
 * @returns A selection range if the html contains a valid selection path, otherwise null
 */
function setHtmlWithSelectionPath(rootNode, html, trustedHTMLHandler) {
    if (!rootNode) {
        return null;
    }
    html = html || '';
    var lastComment = LastCommentRegex.exec(html);
    rootNode.innerHTML = (trustedHTMLHandler === null || trustedHTMLHandler === void 0 ? void 0 : trustedHTMLHandler(html)) || html;
    var path = getSelectionPath(rootNode, lastComment === null || lastComment === void 0 ? void 0 : lastComment[1]);
    return path && (0, createRange_1.default)(rootNode, path.start, path.end);
}
exports.default = setHtmlWithSelectionPath;
function getSelectionPath(root, alternativeComment) {
    var _a, _b, _c;
    var pathCommentValue = '';
    var pathCommentNode = null;
    var path = null;
    if (((_a = root.lastChild) === null || _a === void 0 ? void 0 : _a.nodeType) == 8 /* Comment */) {
        pathCommentNode = root.lastChild;
        pathCommentValue = pathCommentNode.nodeValue;
    }
    else {
        pathCommentValue = alternativeComment;
    }
    if (pathCommentValue) {
        try {
            path = JSON.parse(pathCommentValue);
            if (path && ((_b = path.start) === null || _b === void 0 ? void 0 : _b.length) > 0 && ((_c = path.end) === null || _c === void 0 ? void 0 : _c.length) > 0) {
                if (pathCommentNode) {
                    root.removeChild(pathCommentNode);
                }
            }
            else {
                path = null;
            }
        }
        catch (_d) { }
    }
    return path;
}
//# sourceMappingURL=setHtmlWithSelectionPath.js.map