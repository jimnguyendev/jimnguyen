"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var getInnerHTML_1 = require("../utils/getInnerHTML");
var getSelectionPath_1 = require("./getSelectionPath");
var getTagOfNode_1 = require("../utils/getTagOfNode");
var queryElements_1 = require("../utils/queryElements");
/**
 * Get inner Html of a root node with a selection path which can be used for restore selection.
 * The result string can be used by setHtmlWithSelectionPath() to restore the HTML and selection.
 * @param rootNode Root node to get inner Html from
 * @param range The range of selection. If pass null, no selection path will be added
 * @returns Inner HTML of the root node, followed by HTML comment contains selection path if the given range is valid
 */
function getHtmlWithSelectionPath(rootNode, range) {
    if (!rootNode) {
        return '';
    }
    var _a = range || {}, startContainer = _a.startContainer, endContainer = _a.endContainer, startOffset = _a.startOffset, endOffset = _a.endOffset;
    var isDOMChanged = false;
    (0, queryElements_1.default)(rootNode, 'table', function (table) {
        var tbody = null;
        for (var child = table.firstChild; child; child = child.nextSibling) {
            if ((0, getTagOfNode_1.default)(child) == 'TR') {
                if (!tbody) {
                    tbody = table.ownerDocument.createElement('tbody');
                    table.insertBefore(tbody, child);
                }
                tbody.appendChild(child);
                child = tbody;
                isDOMChanged = true;
            }
            else {
                tbody = null;
            }
        }
    });
    if (range && isDOMChanged) {
        try {
            range.setStart(startContainer, startOffset);
            range.setEnd(endContainer, endOffset);
        }
        catch (_b) { }
    }
    var content = (0, getInnerHTML_1.default)(rootNode);
    var selectionPath = range && (0, getSelectionPath_1.default)(rootNode, range);
    return selectionPath ? content + "<!--" + JSON.stringify(selectionPath) + "-->" : content;
}
exports.default = getHtmlWithSelectionPath;
//# sourceMappingURL=getHtmlWithSelectionPath.js.map