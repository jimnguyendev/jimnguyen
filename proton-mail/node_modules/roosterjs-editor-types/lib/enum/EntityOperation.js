"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityOperation = void 0;
/**
 * Define possible operations to an entity
 */
var EntityOperation;
(function (EntityOperation) {
    /**
     * Notify plugins that there is a new plugin was added into editor.
     * Plugin can handle this event to entity hydration.
     * This event will be only fired once for each entity DOM node.
     * After undo, or copy/paste, since new DOM nodes were added, this event will be fired
     * for those entities represented by newly added nodes.
     */
    EntityOperation[EntityOperation["NewEntity"] = 0] = "NewEntity";
    /**
     * Notify plugins that user is clicking target to an entity
     */
    EntityOperation[EntityOperation["Click"] = 1] = "Click";
    /**
     * Notify plugins that user is triggering context menu to an entity
     */
    EntityOperation[EntityOperation["ContextMenu"] = 2] = "ContextMenu";
    /**
     * Notify plugins that user is escaping from an entity by pressing ESC key
     */
    EntityOperation[EntityOperation["Escape"] = 3] = "Escape";
    /**
     * Notify plugins that user is removing an entity from its start position using DELETE key
     */
    EntityOperation[EntityOperation["RemoveFromStart"] = 4] = "RemoveFromStart";
    /**
     * Notify plugins that user is remove an entity from its end position using BACKSPACE key
     */
    EntityOperation[EntityOperation["RemoveFromEnd"] = 5] = "RemoveFromEnd";
    /**
     * Notify plugins that an entity is being overwritten.
     * This can be caused by key in, cut, paste, delete, backspace ... on a selection
     * which contains some entities.
     */
    EntityOperation[EntityOperation["Overwrite"] = 6] = "Overwrite";
    /**
     * Notify plugins that an entity is being partially overwritten.
     * This happens when user selected part of the entity then do key press, or cut, paste, delete, backspace, ...
     */
    EntityOperation[EntityOperation["PartialOverwrite"] = 7] = "PartialOverwrite";
    /**
     * Notify plugins that editor is generating HTML content for save.
     * Plugin should use this event to remove any temporary content, and only leave DOM nodes that
     * should be saved as HTML string.
     * This event will provide a cloned DOM tree for each entity, do NOT compare the DOM nodes with cached nodes
     * because it will always return false.
     */
    EntityOperation[EntityOperation["ReplaceTemporaryContent"] = 8] = "ReplaceTemporaryContent";
    /**
     * Notify plugins that editor has attached shadow root for an entity.
     * Plugins can handle this event to do extra operations to the shadow root
     */
    EntityOperation[EntityOperation["AddShadowRoot"] = 9] = "AddShadowRoot";
    /**
     * Notify plugins that editor has removed the shadow root of an entity
     * Plugins can handle this event to do any necessary clean up for shadow root
     */
    EntityOperation[EntityOperation["RemoveShadowRoot"] = 10] = "RemoveShadowRoot";
})(EntityOperation = exports.EntityOperation || (exports.EntityOperation = {}));
//# sourceMappingURL=EntityOperation.js.map